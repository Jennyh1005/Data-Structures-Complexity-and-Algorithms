Sets

- A set is an unordered collection with no duplicate elements in Python 3.
- Sets are a mathematical way to describe a collection of different unique objects.
- Sets in Python 3 can be defined using curly braces {}.
- Sets can be initialized with values, such as {1, 2, 3} or {'h','e','l','l','o'}.
- Sets can also be defined using the set() function, such as empty_set = set().
- Sets can contain any hashable data type, such as numbers, strings, and tuples.
- Sets automatically remove duplicate elements, and the order of elements in a set is not guaranteed.
- Sets are iterable and mutable, meaning elements can be added, removed, or modified in a set after it is created.
- Sets are useful for performing mathematical operations, such as union, intersection, and difference.
- Basic built-in functions can be used with sets, such as len(), min(), and max().
- Membership operators, such as in and not in, can be used to check if an element exists in a set.
- Sets can be used for mathematical operations, such as union (|), intersection (&), difference (-), symmetric difference (^), and subset/superset (<=/>=).
- Sets also have corresponding methods for these mathematical operations, such as union(), intersection(), difference(), symmetric_difference(), issubset(), and issuperset().
- Elements can be added to a set using the add() method or the update() method.
- Elements can be removed from a set using the remove() method or the discard() method.
- Sets can be cleared using the clear() method.
- Sets can be copied using the copy() method or the set() function.
- Sets can be converted to other data types, such as lists or tuples, using the corresponding functions, such as list() or tuple().
- Sets are commonly used for tasks such as removing duplicates from a list, checking for the existence of an element in a collection, or performing set operations on collections of data.
